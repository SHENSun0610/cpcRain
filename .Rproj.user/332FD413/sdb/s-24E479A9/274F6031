{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Getting Started with cpcRain\"\nauthor: \"James Doss-Gollin\"\ndate: \"`r Sys.Date()`\"\noutput: rmarkdown::html_vignette\nvignette: >\n  %\\VignetteIndexEntry{Vignette Title}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteEncoding{UTF-8}\n---\n\n```{r setup}\nknitr::opts_chunk$set(warnings = F, message = F)\n```\n\n\n# Motivation\n\nThis package is an extension and overhaul of the original [cpcRain package](https://github.com/dlebauer/cpcRain) by [dlebauer](https://github.com/dlebauer).\nMany of the functions were written by Gopi Goteti in their first form and I have just updated and extended them.\nThat package presented R code to download and analyze global precipitation data from the Climate Prediction Center (CPC)\n\n* Spatial Coverage: Global (mostly land areas)\n* Temporal Coverage: 1979/1/1 - present\n* Spatial Resolution: 0.5 degrees lat-lon (~ 50 x 50 km)\n* Temporal Resolution: daily\n\nHydrological and climatological studies sometimes require rainfall data over the entire world for long periods of time. \nThe Climate Prediction Center's [(CPC)](http://www.cpc.ncep.noaa.gov/) daily data, from 1979 to present, at a spatial resolution of 0.5 degrees lat-lon (~ 50 km at the equator) is a good resource. \nThis data is available at CPC's ftp site (ftp://ftp.cpc.ncep.noaa.gov/precip/CPC_UNI_PRCP/GAUGE_GLB/). However, there are a number of issues:\n\nIssues with obtaining data:\n* there are too many files (365/366 per year * 34 years, separate folder for each year)\n* file naming conventions have chnaged over time, one format prior to 2006 and couple of different formats afterwards\n* downloading multiple files simultaneously from the CPC ftp site does not seem to work properly.\n\nIssues with processing data:\n* file formats have changed over time, gzipped files prior to 2008 and binary files afterwards\n* files are in binary format and there no software/code readily available to process/plot the data\n\n# Package Philosophy\n\nThis package is designed to facilitate two use cases that are likely to cover most users of the CPC data:\n\n1. Users who wish to extract data from a single date or a short date range for one-time use. This is possible through the `cpcQueryDateRange` function.\n2. Users who wish to build a library of CPC data which they can query whenever is needed. This is accomplished by two functions. First the `cpcYearToNCDF` function downloads all CPC data (one year at a time) and stores the full year of data to a compressed NCDF (version 4) file. Next the `cpcReadNCDF` function allows users to easily extract data from those files. Extracting data from multiple years at once is permitted, as long as the data files for all years are present.\n\nFurther, this package supports users who wish to extract data in two formats:\n1. 3D arrays. The CPC data is gridded on a 0.5 degree grid of longitude and latitude; the third dimension is time.\n2. Tidy data, via the `data.table` package. This format allows for easy manipulation of multiple variables, subsetting, grouping, and other fast operations on the data.\n\n## Installation\n\n```{r}\n# install.packages('devtools')\n#devtools::install_github(, dependencies = T)\n```\n\n\n# Example 1: Sending a Quick Data Query\n\nFor this example, we'll download data from the winter holidays of 1998.\nSince we're just interested in a short date range, we don't need to download years of data, write `.nc` files, or construct complicated databases.\nWe do this with the `cpcQueryDateRange` function:\n\n```{r}\ndt1 <- cpcQueryDateRange(start_date = ymd('1998-12-24'),\n                         end_date = ymd('1999-01-04'),\n                         tidy = T)\n```\n\nWe'll look into the `tidy` argument in a moment.\nThe `cpcQueryDateRange` gives us a list of outputs. \nThe first tells us whether the dates we requested were successfully downloaded:\n\n```{r}\ndt1$download_success\n```\n\nThe second gives the rainfall data:\n\n```{r}\ndt1$precip_data\n```\n\nSince we set `tidy = TRUE`, we get a tidy `data.table`.\nIf you're not familiar with this package and data format, you should read their introductions (on the CRAN package page, for example).\nThe `data.table` syntax allows us to subset, group, and apply functions to the data easily.\nWe can also _cast_ our data to create a matrix of dates versus grid cells using the `data.table::dcast` function.\n\nWe can also set `tidy = FALSE` to get an array of the data:\n\n```{r}\ndt2 <- cpcQueryDateRange(start_date = ymd('1998-12-24'),\n                         end_date = ymd('1999-01-04'),\n                         tidy = F)\n```\n\nBe aware that every time you use the `cpcQueryDateRange` function, data is re-downloaded from the server.\n\n\n```{r}\ndt2$precip_data %>% dim()\n```\n\nAs expected, our data has 720 values of longitude, 360 of latitude, and 12 of time.\nThe `dimnames` gives us the longitude, latitude, and date parameters in an easy-to-parse format:\n\n```{r}\nlapply(dimnames(dt2$precip_data), head)\n```\n\nIf we want, we can use the `cpcMeltArray` function to turn the 3D array of `dt2$precip_data` into the `data.table` of `dt1$precip_data`:\n\n```{r}\ndt3 <- dt2$precip_data %>% cpcMeltArray\ncolMeans(dt3 == dt1$precip_data, na.rm = T)\n```\n\nThis shows that we get the same results either way.\n\n\n# Example 2: Building a Data Library\n\nNow let's imagine that we're not content just querying data from a few weeks, but we want to look at all rainfall over the Northeast United States from 1997-2000.\nSince this will be a large data set, we're going to use the `cpcYearToNCDF` function to build a library of `.nc` files, one for each year, to store our data.\nThat way, we can access it efficiently whenever we want.\n\n```{r}\nfor(year_i in 1997:2000){\n  cpcYearToNCDF(\n    year = year_i,\n    download_folder = getwd(),\n    empty_raw = TRUE,\n    overwrite = FALSE\n  )\n}\n```\n\nThe `download_folder` parameter specifies where we want to save our `.nc` files after we create them.\nThe `empty_raw` is set to TRUE, so the program will automatically delete the raw files downloaded from the CPC server after the `.nc` file is successfully created.\nFinally, the `overwrite` parameter is FALSE, so for a given year if the `.nc` file already exists then the function won't download the data and write the data.\n\nThe process of downloading the files and creating the `.nc` files is slow, but once they're there, it's very easy to query them.\nYou don't even need to do it from **R** -- any software package that can read NCDF _version 4_ files can read them.\nOne way to read the files is with the excellent `ncdf4` package.",
    "created" : 1467049312987.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3794683850",
    "id" : "274F6031",
    "lastKnownWriteTime" : 1467051299,
    "last_content_update" : 1467051876841,
    "path" : "~/Documents/Projects/cpcRain/vignettes/Introduction.Rmd",
    "project_path" : "vignettes/Introduction.Rmd",
    "properties" : {
    },
    "relative_order" : 9,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}